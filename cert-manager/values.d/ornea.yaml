# kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.9.1/cert-manager.crds.yaml
# helm upgrade --install --create-namespace cert-manager -n cert-manager cert-manager/cert-manager --atomic --debug -f cert-manager/values.d/ornea.yaml

global:
  leaderElection:
    namespace: cert-manager

featureGates: "AdditionalCertificateOutputFormats=true"
clusterResourceNamespace: "default"
extraArgs: []
  # When this flag is enabled, secrets will be automatically removed when the certificate resource is deleted
  # - --enable-certificate-owner-ref=true
# Use this flag to enabled or disable arbitrary controllers, for example, disable the CertificiateRequests approver
# - --controllers=*,-certificaterequests-approver

resources:
  requests:
    cpu: 2m
    memory: 38Mi
  limits:
    cpu: 50m
    memory: 256Mi
#nodeSelector:
#  cloud.google.com/gke-nodepool: pool-dev

ingressShim:
  defaultIssuerName: letsencrypt-prod
  defaultIssuerKind: ClusterIssuer
  defaultIssuerGroup: cert-manager.io

prometheus:
  servicemonitor:
    enabled: true
    interval: 60s
    scrapeTimeout: 60s

webhook:
  extraArgs:
    - "--feature-gates=AdditionalCertificateOutputFormats=true"
  resources:
    requests:
      cpu: 6m
      memory: 18Mi
    limits:
      cpu: 10m
      memory: 32Mi
  #nodeSelector:
  #  cloud.google.com/gke-nodepool: pool-dev

cainjector:
  resources:
    requests:
      cpu: 5m
      memory: 54Mi
    limits:
      cpu: 10m
      memory: 256Mi
  #nodeSelector:
  #  cloud.google.com/gke-nodepool: pool-dev

# This startupapicheck is a Helm post-install hook that waits for the webhook
# endpoints to become available.
# The check is implemented using a Kubernetes Job- if you are injecting mesh
# sidecar proxies into cert-manager pods, you probably want to ensure that they
# are not injected into this Job's pod. Otherwise the installation may time out
# due to the Job never being completed because the sidecar proxy does not exit.
# See https://github.com/cert-manager/cert-manager/pull/4414 for context.
#startupapicheck:
#  nodeSelector:
#    cloud.google.com/gke-nodepool: pool-dev

